# Retrieve data from MODBUS slave devices
[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## The plugin supports connections to PLCs via MODBUS/TCP, RTU over TCP, ASCII over TCP or
  ## via serial line communication in binary (RTU) or readable (ASCII) encoding
  ##
  ## Device name
  name = "Device"

  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 1

  ## Timeout for each request
  timeout = "1s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  # busy_retries = 0
  # busy_retries_wait = "100ms"

  # TCP - connect via Modbus/TCP
  controller = "tcp://localhost:502"

  ## Serial (RS485; RS232)
  ## For RS485 specific setting check the end of the configuration.
  ## For unix-like operating systems use:
  # controller = "file:///dev/ttyUSB0"
  ## For Windows operating systems use:
  # controller = "COM1"
  # baud_rate = 9600
  # data_bits = 8
  # parity = "N"
  # stop_bits = 1

  ## Transmission mode for Modbus packets depending on the controller type.
  ## For Modbus over TCP you can choose between "TCP" , "RTUoverTCP" and
  ## "ASCIIoverTCP".
  ## For Serial controllers you can choose between "RTU" and "ASCII".
  ## By default this is set to "auto" selecting "TCP" for ModbusTCP connections
  ## and "RTU" for serial connections.
  # transmission_mode = "auto"

  ## Trace the connection to the modbus device
  # log_level = "trace"

  ## Define the configuration schema
  ##  |---register -- define fields per register type in the original style (only supports one slave ID)
  ##  |---request  -- define fields on a requests base
  ##  |---metric   -- define fields on a metric base
  configuration_type = "register"

  ## Exclude the register type tag
  ## Please note, this will also influence the grouping of metrics as you won't
  ## see one metric per register type anymore!
  # exclude_register_type_tag = false

  ## --- "register" configuration style ---

  ## Measurements
  ##

  ## Digital Variables, Discrete Inputs and Coils
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## data_type   - the (optional) output type, can be BOOL or UINT16 (default)
  ## address     - variable address

  discrete_inputs = [
    { name = "DI_0",          address = [0]},
    { name = "DI_1",           address = [1]},
    { name = "DI_2",          address = [2]},
    { name = "DI_3", address = [3]},
  ]
  coils = [
    { name = "C_0",     address = [0]},
    { name = "C_1",     address = [1]},
    { name = "C_2",    address = [2]},
  ]

  ## Analog Variables, Input Registers and Holding Registers
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## byte_order  - the ordering of bytes
  ##  |---AB, ABCD   - Big Endian
  ##  |---BA, DCBA   - Little Endian
  ##  |---BADC       - Mid-Big Endian
  ##  |---CDAB       - Mid-Little Endian
  ## data_type   - BIT (single bit of a register)
  ##               INT8L, INT8H, UINT8L, UINT8H (low and high byte variants)
  ##               INT16, UINT16, INT32, UINT32, INT64, UINT64,
  ##               FLOAT16-IEEE, FLOAT32-IEEE, FLOAT64-IEEE (IEEE 754 binary representation)
  ##               FIXED, UFIXED (fixed-point representation on input)
  ##               STRING (byte-sequence converted to string)
  ## bit         - (optional) bit of the register, ONLY valid for BIT type
  ## scale       - the final numeric variable representation
  ## address     - variable address

  holding_registers = [
    { name = "HR_0", byte_order = "AB",   data_type = "FIXED", scale=0.01,  address = [0]},
    { name = "HR_1",      byte_order = "AB",   data_type = "FIXED", scale=0.1,   address = [1]},
    { name = "HR_2",       byte_order = "AB", data_type = "FIXED", scale=0.001, address = [2]},
    { name = "HR_3",      byte_order = "AB", data_type = "FIXED", scale=0.001, address = [3]},
    { name = "HR_4",    byte_order = "AB",   data_type = "FIXED", scale=0.1,  address = [4]},
    { name = "HR_5",        byte_order = "AB", data_type = "FIXED", scale=0.1,  address = [5]},
  ]
  input_registers = [
    { name = "IR_0",   byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [0]},
    { name = "IR_1",      byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [1]},
    { name = "IR_2",  byte_order = "AB", data_type = "INT16",   scale=1.0,     address = [2]},
  ]

  ## --- "request" configuration style ---

  ## Per request definition
  ##

  ## Define a request sent to the device
  ## Multiple of those requests can be defined. Data will be collated into metrics at the end of data collection.